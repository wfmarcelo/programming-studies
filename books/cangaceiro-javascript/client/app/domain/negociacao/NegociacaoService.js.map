{"version":3,"sources":["../../../app-src/domain/negociacao/NegociacaoService.js"],"names":["HttpService","Negociacao","ApplicationException","NegociacaoService","constructor","_http","obtemNegociacoesDoPeriodo","periodo","Promise","all","obterNegociacoesDaSemana","obterNegociacoesDaSemanaAnterior","obterNegociacoesDaSemanaRetrasada","reduce","novoArray","item","concat","sort","a","b","data","getTime","err","console","error","get","then","dados","map","objeto","Date","quantidade","valor"],"mappings":";;;;;;AAASA,uB,sBAAAA,W;;AACAC,sB,iBAAAA,U;;AACAC,gC,+BAAAA,oB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gBAEIC,iB,GAAN,MAAMA,iBAAN,CAAwB;;AAE3BC,8BAAc;AACV,yBAAKC,KAAL,GAAa,IAAIL,WAAJ,EAAb;AACH;;AAEKM,yCAAN,GAAkC;AAAA;;AAAA;AAC9B,4BAAI;AACA,gCAAIC,UAAU,MAAMC,QAAQC,GAAR,CAAY,CAC5B,MAAKC,wBAAL,EAD4B,EAE5B,MAAKC,gCAAL,EAF4B,EAG5B,MAAKC,iCAAL,EAH4B,CAAZ,CAApB;;AAMA,mCAAOL,QACFM,MADE,CACK,UAACC,SAAD,EAAYC,IAAZ;AAAA,uCAAqBD,UAAUE,MAAV,CAAiBD,IAAjB,CAArB;AAAA,6BADL,EACkD,EADlD,EAEFE,IAFE,CAEG,UAACC,CAAD,EAAIC,CAAJ;AAAA,uCAAUA,EAAEC,IAAF,CAAOC,OAAP,KAAmBH,EAAEE,IAAF,CAAOC,OAAP,EAA7B;AAAA,6BAFH,CAAP;AAGH,yBAVD,CAUE,OAAOC,GAAP,EAAY;AACVC,oCAAQC,KAAR,CAAcF,GAAd;AACA,kCAAM,IAAIpB,oBAAJ,CAAyB,kDAAzB,CAAN;AACH;AAd6B;AAgBjC;;AAEDQ,2CAA2B;AACvB,2BAAO,KAAKL,KAAL,CACFoB,GADE,CACE,oBADF,EAEFC,IAFE,CAGCC,SAASA,MAAMC,GAAN,CAAUC,UACf,IAAI5B,UAAJ,CAAe,IAAI6B,IAAJ,CAASD,OAAOT,IAAhB,CAAf,EAAsCS,OAAOE,UAA7C,EAAyDF,OAAOG,KAAhE,CADK,CAHV,EAKCV,OAAO;AACH,8BAAM,IAAIpB,oBAAJ,CAAyB,uCAAzB,CAAN;AACH,qBAPF,CAAP;AASH;;AAEDS,mDAAmC;AAC/B,2BAAO,KAAKN,KAAL,CACFoB,GADE,CACE,sBADF,EAEFC,IAFE,CAGCC,SAASA,MAAMC,GAAN,CAAUC,UACf,IAAI5B,UAAJ,CAAe,IAAI6B,IAAJ,CAASD,OAAOT,IAAhB,CAAf,EAAsCS,OAAOE,UAA7C,EAAyDF,OAAOG,KAAhE,CADK,CAHV,EAKCV,OAAO;AACH,8BAAM,IAAIpB,oBAAJ,CAAyB,uCAAzB,CAAN;AACH,qBAPF,CAAP;AASH;;AAEDU,oDAAoC;AAChC,2BAAO,KAAKP,KAAL,CACFoB,GADE,CACE,uBADF,EAEFC,IAFE,CAGCC,SAASA,MAAMC,GAAN,CAAUC,UACf,IAAI5B,UAAJ,CAAe,IAAI6B,IAAJ,CAASD,OAAOT,IAAhB,CAAf,EAAsCS,OAAOE,UAA7C,EAAyDF,OAAOG,KAAhE,CADK,CAHV,EAKCV,OAAO;AACH,8BAAM,IAAIpB,oBAAJ,CAAyB,uCAAzB,CAAN;AACH,qBAPF,CAAP;AASH;AA1D0B,a","file":"NegociacaoService.js","sourcesContent":["import { HttpService } from \"../../util/HttpService.js\";\nimport { Negociacao } from \"./Negociacao.js\";\nimport { ApplicationException } from \"../../util/ApplicationException.js\";\n\nexport class NegociacaoService {\n\n    constructor() {\n        this._http = new HttpService();\n    }\n\n    async obtemNegociacoesDoPeriodo() {\n        try {\n            let periodo = await Promise.all([\n                this.obterNegociacoesDaSemana(),\n                this.obterNegociacoesDaSemanaAnterior(),\n                this.obterNegociacoesDaSemanaRetrasada()\n            ]);\n\n            return periodo\n                .reduce((novoArray, item) => novoArray.concat(item), [])\n                .sort((a, b) => b.data.getTime() - a.data.getTime());\n        } catch (err) {\n            console.error(err);\n            throw new ApplicationException('Não foi possível obter as negociações do período');\n        }\n        \n    }\n\n    obterNegociacoesDaSemana() {\n        return this._http\n            .get('negociacoes/semana')\n            .then(\n                dados => dados.map(objeto =>\n                    new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)),\n                err => {\n                    throw new ApplicationException('Não foi possível obter as negociações');\n                }\n            );\n    }\n\n    obterNegociacoesDaSemanaAnterior() {\n        return this._http\n            .get('negociacoes/anterior')\n            .then(\n                dados => dados.map(objeto =>\n                    new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)),\n                err => {\n                    throw new ApplicationException('Não foi possível obter as negociações');\n                }\n            );\n    }\n\n    obterNegociacoesDaSemanaRetrasada() {\n        return this._http\n            .get('negociacoes/retrasada')\n            .then(\n                dados => dados.map(objeto =>\n                    new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)),\n                err => {\n                    throw new ApplicationException('Não foi possível obter as negociações');\n                }\n            );\n    }\n}"]}